* Ethernet Switching

** [7.1] Ethernet Frames
*** [7.1.1] Ethernet Encapsulation
    - ethernet is defined by the data link layer and pysical layer protocols
    - *802.3 is ethernet*
    - *802.11 is WLAN*
    - *802.15 is Bluetooth*
    - *802.2 is LLC*

*** [7.1.2] Data link sublayers
    IEEE 802 LAN/MAN use the following sublayers of the data link layer to operate.
    - LLC sublayer (802.2)
      + communicates between the *networking software at the upper layers and the device hardware at the lower layers*
      + places information in the frame that identifies whoch network layer protocol is being used for the frame
    - MAC sublayer (802.3, 802.11, or 802.15)
      + implemented in hardware and is responsible for *data encapsulation and media access control*
      + provides data link layer addressing and is integrated with various physcial layer technologies
    [[./media/llcmac.png]]

*** [7.1.3] MAC Sublayer
    reponsible for *data encapsulation and accessing the media*


    ~#show mac address-table~ to show the mac address table

**** Data encapsulation
    IEEE 802.3 data encapsulation includes the following
    - Ethernet frame
      + internal structure of the ethernet frame
    - Ethernet addressing
      + includes both the source and destination mac address to deliver the ethernet frame fromt ethernet NIC to ethernet NIC on the same LAN
    - Ethernet error detection
      + includes frame check sequence (FCS) trailer used for error detection

**** Accessing the media
    [[./media/ethernet-standards.png]]

*** [7.1.4] Ethernet frame fields
    - *minimum frame size is 64 bytes*
    - expected *maximum is 1518*
    - *from destination MAC address field to FCS*, the preamble field is not included

**** Collision fragment/runt frame
    - frames less than 64 bytes
    - is dropped
      
**** jumbo/baby giant frames
    - frames *> 1500 bytes of data*
    - is dropped

**** Ethernet Frame Fields
    [[./media/framefield.png]]
    

**** Ethernet frame fields detail
| Field                                     | Description                                                                                 |
|-------------------------------------------+---------------------------------------------------------------------------------------------|
| preamble and start frame delimeter fields | *7 bytes (preamble) + 1 byte (start of frame) = 8 bytes*                                    |
|                                           | used for schronization between the sending and receiving devices                      |
|                                           | used to get the attention of the receiving nodes                                            |
|                                           | tell receivers to get ready to receive a new frame                                          |
|-------------------------------------------+---------------------------------------------------------------------------------------------|
| destinatin MAC address field              | *6 bytes*                                                                                   |
|                                           | identifier of the intended recipient                                                        |
|                                           | helps determine if the frame is addressed to them                                           |
|                                           | compared to the MAC address of the receiving device, match then accept the frame, else drop |
|                                           | can be a unicast, multicast, or broadcast address                                           |
|-------------------------------------------+---------------------------------------------------------------------------------------------|
| source MAC address field                  | *6 bytes*                                                                                   |
|                                           | indentifies the originating NIC                                                             |
|-------------------------------------------+---------------------------------------------------------------------------------------------|
| type/length                               | *2 bytes*                                                                                   |
|                                           | identifies the upperlayer protocol encapsulated in the ethernet frame                       |
|                                           | 0x0800 IPv4                                                                                 |
|                                           | 0x86DD IPv6                                                                                 |
|                                           | 0x806 ARP                                                                                   |
|                                           | a.k.a. EtherType, Type, or Length                                                    |
|-------------------------------------------+---------------------------------------------------------------------------------------------|
| data field                                | *46 - 1500 bytes*                                                                           |
|                                           | contains the encapsulated data froma higher level                                           |
|                                           | pads are used to increase size if it is a runt frame                                        |
|-------------------------------------------+---------------------------------------------------------------------------------------------|
| frame check sequence field                | *4 bytes*                                                                                   |
|                                           | used to detect errors in a frame                                                            |
|                                           | uses CRC, included when the frame is sent                                                   |
|                                           | when received, generates a new CRC and compares                                             |
|                                           | if not a match, indicates data has been changed, else accepted                              |

** [7.2] Ethernet MAC Address
*** [7.2.1] MAC Address and Hexadecimal
    - MAC Address
      + is a *48 bit* binary value
      + written in hexadecimal: xx:xx:xx:xx:xx:xx

*** [7.2.2] Ethernet MAC Address
    - 48 bit addressed expressed using 12 hexadecianl digits, 6 bytes in length
    - unique in every device
    - has two parts
      | xx:xx:xx:                          | xx:xx:xx        |
      |------------------------------------+-----------------|
      | OUI                                | unique value    |
      | organizationally unique identifier | vendor assigned |

      [[./media/oui.png]]
    - *Cisco OUI is 00-60-2F*

*** [7.2.3] Frame Processing
    - MAC is sometimes referred to as a *burned-in address* (BIA)
    - burned into the ROM of the NIC
    /reference the module/

*** [7.2.4] Unicast mac address
    - unicast mac address is the *unique adderess* used when a frame is sent from a single transmitting device to a single destination device

*** [7.2.5] Broadcast MAC Address
    - received by every device on the ethernet LAN
    - *FF-FF-FF-FF-FF-FF*
    - flooded out all ethernet switch ports except the incoming port
    - not forwarded by a router

*** [7.2.6] Multicast MAC address
    - *01-00-5E* when encapsulated data is IPv4
    - *33-33* when encapsulated data is IPv6
    - range of IPv4 multicast address is *224.0.0.0 to 239.255.255.255*
    - range of IPv6 multicast address beings with *ff00:/8*
    - source will always be a unicast address

** [7.3] MAC Address table

*** [7.3.1] Switch Fundamentals
    - MAC address table
      + sometimes referred to as *content addressable memory (CAM)* table
      | Port | MAC address |
      |------+-------------|
      |      |             |
      

*** [7.3.2] Switch learning and forwarding
    - switch dynamically build the MAC address table by examining the source MAC address of the frames received on a port
    - forwards frames by searching for a match between the destination MAC address in the frame and an entry in the MAC address table
    - refreshes every 5 minutes
    /do activity in netacad/

    
** [7.4] Switch Speeds and Forwading Methods
*** [7.4.1] Frame Forwading Methods on Cisco Switches
    forwarding methods used by switches for switching data between network ports
    - *Store-and-forward switching*
      + receive the entrire frame and computes the CRC
      + CRC uses a mathematical formula based on the number of bits in the frame, to determine errors
      + if valid, switch looks up the destination address
      + then forwarded out of the correct port
      + *advantage*: checks for errors
      + *required for QoS analysis on converged networks* (because of traffic prioritization)
    - *cut-through switching*
      + forwards before the frame is entirely recieved
      + at minimum, destination address is read before forwarding
*** [7.4.2] Cut-through switching
    - switch *acts upon the data as soon as it is received*, even if the transmission is not complete
    - destination MAC is read, determines the outgoing port, and forwards the frame onto its destination through the designed switch port
**** variats of cut-through switching
    - *fast-forward switching*
      + *offers lowest latency*
      + forwards right after reading the destination address
      + prone to relaying packets with errors
      + *the typical method of cut-through switching*
    - *fragment-free switching*
      + *stores the first 64 bytes of frame before forwarding*
      + first 64 bytes only because most network errors occur here
      + performs small error check before forwarding
      + compromise betweek fast-forward switching and store-and-forward switching
*** [7.4.3] Memory Buffering on Switches
**** Memory Buffering Methods
    | Method             | description                                                                                                                                                                                   |
    |--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | port-based memeory | frames are stored in queues that are linked to specific incoming and outgoing ports                                                                                                           |
    |                    | a frame is transmitted to the outgoind port only when all the frames ahead in the queue have been successfully transmitted                                                                    |
    |                    | delay because of a single frame is possible                                                                                                                                                   |
    |                    | delays are possible even if other frames could be transmitted to open destination ports                                                                                                       |
    |--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | shared memory      | deposits all frames into a common memory buffer shared by all switch ports and amount of buffer memory required by a port is dynamically allocated                                           |
    |                    | frames in the buffer are dynamically linked to the destination port enabling a packet to be received on one port and then transmitted on another port, without moving it to a different queue |
    |--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
*** [7.4.4] Duplex and Speed setting
    - autonegotiation
      + optional function onmost ethernet switches and NICs
      + enables two devices to automatically negotiate the best speed and duplex capabilities
      + full duplex mode is chosen if both device are capable, along with their highest common bandwidth

    /duplex mismatch is one of the most common causes of performance issues on 10/100Mbps ethernet links/
    /best practice is to set both layer 2 swtich in duplex mode/

*** [7.4.5] Auto-MDIX
    - automatic medium-dependent interface crossover
    - automatically detects the type of cable attached to the port and configures the interfaces accordingly
    - enabled by default
    - ~mdix auto interface~ command
